library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
# Initialize
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
# Sampling Loop
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
# Print the result
print(head(samples_transformed))
```
```
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
# Initialize
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
# Sampling Loop
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
# Print the result
print(head(samples_transformed))
```
```
accepted <- n_iter - rejected
acceptance_ratio <- accepted / n_iter
print(paste("Acceptance Ratio:", acceptance_ratio))
print(paste("Rejection Ratio:", rejected / n_iter))
# Print the result
print(head(samples_transformed))
```
plot(samples_transformed[, 1], samples_transformed[, 2], type = "l", col = "blue", xlab = "phi", ylab = "sigma")
library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
# Initialize
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
# Sampling Loop
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
# Print the result
print(head(samples_transformed))
```
# Print the result
print(head(samples_transformed))
```
```
accepted <- n_iter - rejected
acceptance_ratio <- accepted / n_iter
print(paste("Acceptance Ratio:", acceptance_ratio))
print(paste("Rejection Ratio:", rejected / n_iter))
library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
# Initialize
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
# Sampling Loop
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
# Print the result
print(head(samples_transformed))
```
library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
print(head(samples_transformed))
# Plot the trajectory of samples
plot(samples_transformed[, 1], samples_transformed[, 2],
type = "l", col = "blue", xlab = expression(phi), ylab = expression(sigma),
main = "Trajectory of Samples in (phi, sigma) Space")
# Print the result
print(head(samples_transformed))
```
library(MASS)
# Load the file time_series.txt
time_series <- scan("time_series.txt")
# Log-posterior function for AR(1)
log_posterior <- function(phi, log_sigma) {
sigma <- exp(log_sigma)
n <- length(time_series)
log_prior <- dnorm(phi, 0, 1, log = TRUE) + dgamma(sigma, 2, 2, log = TRUE) + log_sigma
log_likelihood <- sum(dnorm(time_series[-1], mean = phi * time_series[-n], sd = sigma, log = TRUE))
return(log_prior + log_likelihood)
}
# Metropolis-Hastings Sampler
n_iter <- 5000
samples <- matrix(NA, ncol = 2, nrow = n_iter)
colnames(samples) <- c("phi", "sigma")
# Initialize
phi <- 0.5
log_sigma <- log(1)
samples[1, ] <- c(phi, log_sigma)
phi <- 0.5
sigma <- 1
samples[1, ] <- c(phi, sigma)
proposal_cov <- diag(c(0.05^2, 0.1^2))  # Covariance matrix tau*I
rejected <- 0
# Sampling Loop
for (i in 2:n_iter) {
proposal <- mvrnorm(1, c(phi, log_sigma), proposal_cov)
log_acceptance_ratio <- log_posterior(proposal[1], proposal[2]) - log_posterior(phi, log_sigma)
if (log(runif(1)) < log_acceptance_ratio) {
phi <- proposal[1]
log_sigma <- proposal[2]
} else {
rejected <- rejected + 1
}
samples[i, ] <- c(phi, log_sigma)
}
# Transform log_sigma back to sigma for interpretation
samples_transformed <- samples
samples_transformed[, 2] <- exp(samples[, 2])
# Print the result
print(head(samples_transformed))
```
# Print the result
print(head(samples_transformed))
```
theme_set(theme_bw(20))
theme_set(theme_bw(20))
theme_set(theme_bw(20))
install.packages("ggplot2")
theme_set(theme_bw(20))
library(ggplot2)
theme_set(theme_bw(20))
okabi_colors <- c("#E69F00", "#56B4E9", "#009E73")
prior_color <- "#009E73"
likelihood_color <- "#E69F00"
posterior_color <- "#56B4E9"
data <- read.csv("data7.csv", header=TRUE, stringsAsFactors=FALSE)
library(ggplot2)
theme_set(theme_bw(20))
okabi_colors <- c("#E69F00", "#56B4E9", "#009E73")
prior_color <- "#009E73"
likelihood_color <- "#E69F00"
posterior_color <- "#56B4E9"
data <- read.csv("data7.csv", header=TRUE, stringsAsFactors=FALSE)
data$log_circumference <- log(data$circumference)
library(ggplot2)
theme_set(theme_bw(20))
okabi_colors <- c("#E69F00", "#56B4E9", "#009E73")
prior_color <- "#009E73"
likelihood_color <- "#E69F00"
posterior_color <- "#56B4E9"
data <- read.csv("data7.txt", header=TRUE, stringsAsFactors=FALSE)
data$log_circumference <- log(data$circumference)
x_pred <- seq(118, 1582, length.out = 100)
x_pred <-c(x_pred,730)
gp_model <- stan_model("my_gp.stan")
```
install.packages("rstan")
library(ggplot2)
library(rstan)
theme_set(theme_bw(20))
okabi_colors <- c("#E69F00", "#56B4E9", "#009E73")
prior_color <- "#009E73"
likelihood_color <- "#E69F00"
posterior_color <- "#56B4E9"
data <- read.csv("data7.txt", header=TRUE, stringsAsFactors=FALSE)
data$log_circumference <- log(data$circumference)
x_pred <- seq(118, 1582, length.out = 100)
x_pred <-c(x_pred,730)
gp_model <- stan_model("my_gp.stan")
gp_samples <- sampling(gp_model,
list(N_data = nrow(data),
x_data = as.array(data$age),
y = as.array(data$log_circumference),
N_pred = length(x_pred),
x_pred = x_pred,
lambda = 1,
alpha = 0.5,
sigma = 0.1
),
chains = 1, iter = 2000)
